# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import mkt.constants.applications
import mkt.site.models
import mkt.users.models
import mkt.translations.models
import django_extensions.db.fields.json
import django.db.models.deletion
import mkt.translations.fields
import mkt.webapps.models
from django.conf import settings
import mkt.constants.regions


class Migration(migrations.Migration):

    dependencies = [
        ('translations', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('versions', '0001_initial'),
        ('tags', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AddonDeviceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('device_type', models.PositiveIntegerField(default=1, choices=[(1, mkt.constants.applications.DEVICE_DESKTOP), (2, mkt.constants.applications.DEVICE_MOBILE), (3, mkt.constants.applications.DEVICE_TABLET), (4, mkt.constants.applications.DEVICE_GAIA)])),
            ],
            options={
                'db_table': 'addons_devicetypes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AddonExcludedRegion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('region', models.PositiveIntegerField(db_index=True, choices=[(1, mkt.constants.regions.RESTOFWORLD), (63, mkt.constants.regions.AND), (241, mkt.constants.regions.ARE), (58, mkt.constants.regions.AFG), (67, mkt.constants.regions.ATG), (65, mkt.constants.regions.AIA), (60, mkt.constants.regions.ALB), (68, mkt.constants.regions.ARM), (64, mkt.constants.regions.AGO), (66, mkt.constants.regions.ATA), (20, mkt.constants.regions.ARG), (62, mkt.constants.regions.ASM), (71, mkt.constants.regions.AUT), (70, mkt.constants.regions.AUS), (69, mkt.constants.regions.ABW), (59, mkt.constants.regions.ALA), (72, mkt.constants.regions.AZE), (84, mkt.constants.regions.BIH), (75, mkt.constants.regions.BRB), (31, mkt.constants.regions.BGD), (77, mkt.constants.regions.BEL), (89, mkt.constants.regions.BFA), (88, mkt.constants.regions.BGR), (74, mkt.constants.regions.BHR), (90, mkt.constants.regions.BDI), (79, mkt.constants.regions.BEN), (253, mkt.constants.regions.BLM), (80, mkt.constants.regions.BMU), (87, mkt.constants.regions.BRN), (82, mkt.constants.regions.BOL), (252, mkt.constants.regions.BES), (7, mkt.constants.regions.BRA), (73, mkt.constants.regions.BHS), (81, mkt.constants.regions.BTN), (85, mkt.constants.regions.BVT), (45, mkt.constants.regions.BWA), (76, mkt.constants.regions.BLR), (78, mkt.constants.regions.BLZ), (92, mkt.constants.regions.CAN), (97, mkt.constants.regions.CCK), (100, mkt.constants.regions.COD), (54, mkt.constants.regions.CAF), (99, mkt.constants.regions.COG), (226, mkt.constants.regions.CHE), (40, mkt.constants.regions.CIV), (101, mkt.constants.regions.COK), (23, mkt.constants.regions.CHL), (42, mkt.constants.regions.CMR), (21, mkt.constants.regions.CHN), (9, mkt.constants.regions.COL), (27, mkt.constants.regions.CRI), (103, mkt.constants.regions.CUB), (93, mkt.constants.regions.CPV), (254, mkt.constants.regions.CUW), (96, mkt.constants.regions.CXR), (105, mkt.constants.regions.CYP), (34, mkt.constants.regions.CZE), (14, mkt.constants.regions.DEU), (107, mkt.constants.regions.DJI), (106, mkt.constants.regions.DNK), (108, mkt.constants.regions.DMA), (109, mkt.constants.regions.DOM), (61, mkt.constants.regions.DZA), (26, mkt.constants.regions.ECU), (112, mkt.constants.regions.EST), (43, mkt.constants.regions.EGY), (248, mkt.constants.regions.ESH), (111, mkt.constants.regions.ERI), (8, mkt.constants.regions.ESP), (113, mkt.constants.regions.ETH), (117, mkt.constants.regions.FIN), (116, mkt.constants.regions.FJI), (114, mkt.constants.regions.FLK), (168, mkt.constants.regions.FSM), (115, mkt.constants.regions.FRO), (30, mkt.constants.regions.FRA), (121, mkt.constants.regions.GAB), (127, mkt.constants.regions.GRD), (123, mkt.constants.regions.GEO), (118, mkt.constants.regions.GUF), (130, mkt.constants.regions.GGY), (124, mkt.constants.regions.GHA), (125, mkt.constants.regions.GIB), (126, mkt.constants.regions.GRL), (122, mkt.constants.regions.GMB), (55, mkt.constants.regions.GIN), (128, mkt.constants.regions.GLP), (110, mkt.constants.regions.GNQ), (17, mkt.constants.regions.GRC), (218, mkt.constants.regions.SGS), (25, mkt.constants.regions.GTM), (129, mkt.constants.regions.GUM), (46, mkt.constants.regions.GNB), (131, mkt.constants.regions.GUY), (136, mkt.constants.regions.HKG), (133, mkt.constants.regions.HMD), (135, mkt.constants.regions.HND), (102, mkt.constants.regions.HRV), (132, mkt.constants.regions.HTI), (13, mkt.constants.regions.HUN), (138, mkt.constants.regions.IDN), (140, mkt.constants.regions.IRL), (142, mkt.constants.regions.ISR), (141, mkt.constants.regions.IMN), (32, mkt.constants.regions.IND), (86, mkt.constants.regions.IOT), (139, mkt.constants.regions.IRQ), (137, mkt.constants.regions.ISL), (22, mkt.constants.regions.ITA), (144, mkt.constants.regions.JEY), (143, mkt.constants.regions.JAM), (51, mkt.constants.regions.JOR), (33, mkt.constants.regions.JPN), (56, mkt.constants.regions.KEN), (149, mkt.constants.regions.KGZ), (91, mkt.constants.regions.KHM), (146, mkt.constants.regions.KIR), (98, mkt.constants.regions.COM), (201, mkt.constants.regions.KNA), (147, mkt.constants.regions.KOR), (148, mkt.constants.regions.KWT), (94, mkt.constants.regions.CYM), (145, mkt.constants.regions.KAZ), (150, mkt.constants.regions.LAO), (152, mkt.constants.regions.LBN), (202, mkt.constants.regions.LCA), (156, mkt.constants.regions.LIE), (220, mkt.constants.regions.LKA), (154, mkt.constants.regions.LBR), (153, mkt.constants.regions.LSO), (38, mkt.constants.regions.LTU), (157, mkt.constants.regions.LUX), (151, mkt.constants.regions.LVA), (155, mkt.constants.regions.LBY), (173, mkt.constants.regions.MAR), (170, mkt.constants.regions.MCO), (169, mkt.constants.regions.MDA), (15, mkt.constants.regions.MNE), (255, mkt.constants.regions.MAF), (49, mkt.constants.regions.MDG), (164, mkt.constants.regions.MHL), (159, mkt.constants.regions.MKD), (48, mkt.constants.regions.MLI), (53, mkt.constants.regions.MMR), (171, mkt.constants.regions.MNG), (158, mkt.constants.regions.MAC), (184, mkt.constants.regions.MNP), (165, mkt.constants.regions.MTQ), (166, mkt.constants.regions.MRT), (172, mkt.constants.regions.MSR), (163, mkt.constants.regions.MLT), (50, mkt.constants.regions.MUS), (162, mkt.constants.regions.MDV), (160, mkt.constants.regions.MWI), (12, mkt.constants.regions.MEX), (161, mkt.constants.regions.MYS), (174, mkt.constants.regions.MOZ), (175, mkt.constants.regions.NAM), (179, mkt.constants.regions.NCL), (52, mkt.constants.regions.NER), (183, mkt.constants.regions.NFK), (181, mkt.constants.regions.NGA), (29, mkt.constants.regions.NIC), (178, mkt.constants.regions.NLD), (185, mkt.constants.regions.NOR), (177, mkt.constants.regions.NPL), (176, mkt.constants.regions.NRU), (182, mkt.constants.regions.NIU), (180, mkt.constants.regions.NZL), (186, mkt.constants.regions.OMN), (28, mkt.constants.regions.PAN), (18, mkt.constants.regions.PER), (119, mkt.constants.regions.PYF), (190, mkt.constants.regions.PNG), (35, mkt.constants.regions.PHL), (187, mkt.constants.regions.PAK), (11, mkt.constants.regions.POL), (204, mkt.constants.regions.SPM), (192, mkt.constants.regions.PCN), (194, mkt.constants.regions.PRI), (189, mkt.constants.regions.PSE), (193, mkt.constants.regions.PRT), (188, mkt.constants.regions.PLW), (191, mkt.constants.regions.PRY), (195, mkt.constants.regions.QAT), (196, mkt.constants.regions.REU), (197, mkt.constants.regions.ROU), (16, mkt.constants.regions.SRB), (36, mkt.constants.regions.RUS), (198, mkt.constants.regions.RWA), (209, mkt.constants.regions.SAU), (216, mkt.constants.regions.SLB), (210, mkt.constants.regions.SYC), (221, mkt.constants.regions.SDN), (225, mkt.constants.regions.SWE), (212, mkt.constants.regions.SGP), (200, mkt.constants.regions.SHN), (215, mkt.constants.regions.SVN), (223, mkt.constants.regions.SJM), (214, mkt.constants.regions.SVK), (211, mkt.constants.regions.SLE), (207, mkt.constants.regions.SMR), (41, mkt.constants.regions.SEN), (217, mkt.constants.regions.SOM), (222, mkt.constants.regions.SUR), (219, mkt.constants.regions.SSD), (208, mkt.constants.regions.STP), (24, mkt.constants.regions.SLV), (256, mkt.constants.regions.SXM), (227, mkt.constants.regions.SYR), (224, mkt.constants.regions.SWZ), (237, mkt.constants.regions.TCA), (95, mkt.constants.regions.TCD), (120, mkt.constants.regions.ATF), (231, mkt.constants.regions.TGO), (229, mkt.constants.regions.THA), (228, mkt.constants.regions.TJK), (232, mkt.constants.regions.TKL), (230, mkt.constants.regions.TLS), (236, mkt.constants.regions.TKM), (39, mkt.constants.regions.TUN), (233, mkt.constants.regions.TON), (235, mkt.constants.regions.TUR), (234, mkt.constants.regions.TTO), (238, mkt.constants.regions.TUV), (57, mkt.constants.regions.TWN), (44, mkt.constants.regions.TZA), (240, mkt.constants.regions.UKR), (239, mkt.constants.regions.UGA), (4, mkt.constants.regions.GBR), (257, mkt.constants.regions.UMI), (2, mkt.constants.regions.USA), (19, mkt.constants.regions.URY), (243, mkt.constants.regions.UZB), (134, mkt.constants.regions.VAT), (205, mkt.constants.regions.VCT), (10, mkt.constants.regions.VEN), (245, mkt.constants.regions.VGB), (246, mkt.constants.regions.VIR), (244, mkt.constants.regions.VNM), (47, mkt.constants.regions.VUT), (247, mkt.constants.regions.WLF), (206, mkt.constants.regions.WSM), (249, mkt.constants.regions.YEM), (167, mkt.constants.regions.MYT), (37, mkt.constants.regions.ZAF), (250, mkt.constants.regions.ZMB), (251, mkt.constants.regions.ZWE)])),
            ],
            options={
                'db_table': 'addons_excluded_regions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AddonUpsell',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'addon_upsell',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AddonUser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('role', models.PositiveSmallIntegerField(default=5, choices=[(5, 'Owner'), (4, 'Developer'), (1, 'Viewer'), (6, 'Support')])),
                ('listed', models.BooleanField(default=True, verbose_name='Listed')),
                ('position', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'addons_users',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppFeatures',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('has_apps', models.BooleanField(default=False, help_text='App Management API')),
                ('has_packaged_apps', models.BooleanField(default=False, help_text='Packaged Apps Install API')),
                ('has_pay', models.BooleanField(default=False, help_text='Web Payment')),
                ('has_activity', models.BooleanField(default=False, help_text='Web Activities')),
                ('has_light_events', models.BooleanField(default=False, help_text='Ambient Light Sensor')),
                ('has_archive', models.BooleanField(default=False, help_text='Archive')),
                ('has_battery', models.BooleanField(default=False, help_text='Battery')),
                ('has_bluetooth', models.BooleanField(default=False, help_text='Bluetooth')),
                ('has_contacts', models.BooleanField(default=False, help_text='Contacts')),
                ('has_device_storage', models.BooleanField(default=False, help_text='Device Storage')),
                ('has_indexeddb', models.BooleanField(default=False, help_text='IndexedDB')),
                ('has_geolocation', models.BooleanField(default=False, help_text='Geolocation')),
                ('has_idle', models.BooleanField(default=False, help_text='Idle')),
                ('has_network_info', models.BooleanField(default=False, help_text='Network Information')),
                ('has_network_stats', models.BooleanField(default=False, help_text='Network Stats')),
                ('has_proximity', models.BooleanField(default=False, help_text='Proximity')),
                ('has_push', models.BooleanField(default=False, help_text='Simple Push')),
                ('has_orientation', models.BooleanField(default=False, help_text='Screen Orientation')),
                ('has_time_clock', models.BooleanField(default=False, help_text='Time/Clock')),
                ('has_vibrate', models.BooleanField(default=False, help_text='Vibration')),
                ('has_fm', models.BooleanField(default=False, help_text='WebFM')),
                ('has_sms', models.BooleanField(default=False, help_text='WebSMS')),
                ('has_touch', models.BooleanField(default=False, help_text='Touch')),
                ('has_qhd', models.BooleanField(default=False, help_text='Smartphone-Sized Displays (qHD)')),
                ('has_mp3', models.BooleanField(default=False, help_text='MP3')),
                ('has_audio', models.BooleanField(default=False, help_text='Audio')),
                ('has_webaudio', models.BooleanField(default=False, help_text='Web Audio')),
                ('has_video_h264', models.BooleanField(default=False, help_text='H.264')),
                ('has_video_webm', models.BooleanField(default=False, help_text='WebM')),
                ('has_fullscreen', models.BooleanField(default=False, help_text='Full Screen')),
                ('has_gamepad', models.BooleanField(default=False, help_text='Gamepad')),
                ('has_quota', models.BooleanField(default=False, help_text='Quota Management')),
                ('has_camera', models.BooleanField(default=False, help_text='Camera')),
                ('has_mic', models.BooleanField(default=False, help_text='Microphone')),
                ('has_screen_capture', models.BooleanField(default=False, help_text='Screen Capture')),
                ('has_webrtc_media', models.BooleanField(default=False, help_text='WebRTC MediaStream')),
                ('has_webrtc_data', models.BooleanField(default=False, help_text='WebRTC DataChannel')),
                ('has_webrtc_peer', models.BooleanField(default=False, help_text='WebRTC PeerConnection')),
                ('has_speech_syn', models.BooleanField(default=False, help_text='Web Speech Synthesis')),
                ('has_speech_rec', models.BooleanField(default=False, help_text='Web Speech Recognition')),
                ('has_pointer_lock', models.BooleanField(default=False, help_text='Pointer Lock')),
                ('has_notification', models.BooleanField(default=False, help_text='Notifications')),
                ('has_alarm', models.BooleanField(default=False, help_text='Alarms')),
                ('has_systemxhr', models.BooleanField(default=False, help_text='SystemXHR')),
                ('has_tcpsocket', models.BooleanField(default=False, help_text='TCP Sockets')),
                ('has_thirdparty_keyboard_support', models.BooleanField(default=False, help_text='Third-Party Keyboard Support')),
                ('has_network_info_multiple', models.BooleanField(default=False, help_text='Multiple Network Information')),
                ('has_mobileid', models.BooleanField(default=False, help_text='Mobile ID')),
                ('has_precompile_asmjs', models.BooleanField(default=False, help_text='Asm.js Precompilation')),
                ('has_hardware_512mb_ram', models.BooleanField(default=False, help_text='512MB RAM Device')),
                ('has_hardware_1gb_ram', models.BooleanField(default=False, help_text='1GB RAM Device')),
                ('has_nfc', models.BooleanField(default=False, help_text='NFC')),
                ('has_openmobileacl', models.BooleanField(default=False, help_text='OpenMobile ACL')),
                ('version', models.OneToOneField(related_name='features', to='versions.Version')),
            ],
            options={
                'db_table': 'addons_features',
            },
            bases=(models.Model, mkt.site.models.DynamicBoolFieldsMixin),
        ),
        migrations.CreateModel(
            name='AppManifest',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('manifest', models.TextField()),
                ('version', models.OneToOneField(related_name='manifest_json', to='versions.Version')),
            ],
            options={
                'db_table': 'app_manifest',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='BlockedSlug',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(default=b'', unique=True, max_length=255)),
            ],
            options={
                'db_table': 'addons_blocked_slug',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ContentRating',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('ratings_body', models.PositiveIntegerField(choices=[(0, b'CLASSIND'), (1, 'Generic'), (2, b'USK'), (3, b'ESRB'), (4, b'PEGI')])),
                ('rating', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'webapps_contentrating',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Geodata',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('restricted', models.BooleanField(default=False)),
                ('popular_region', models.CharField(max_length=10, null=True)),
                ('banner_regions', mkt.webapps.models.RegionListField(null=True)),
                ('region_de_usk_exclude', models.BooleanField(default=False)),
                ('region_cn_status', models.PositiveIntegerField(default=2, help_text=b'China approval status', db_index=True, choices=[(0, 'Incomplete'), (16, 'Unlisted'), (2, 'Pending approval'), (4, 'Published'), (5, 'Banned from Marketplace'), (11, 'Deleted'), (12, 'Rejected'), (13, 'Approved but private'), (15, 'Blocked')])),
                ('region_cn_nominated', models.DateTimeField(help_text=b'China nomination date', null=True)),
                ('region_br_iarc_exclude', models.BooleanField(default=False)),
                ('region_de_iarc_exclude', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'webapps_geodata',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IARCInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('submission_id', models.PositiveIntegerField()),
                ('security_code', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'webapps_iarc_info',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Installed',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.CharField(unique=True, max_length=255, db_index=True)),
                ('premium_type', models.PositiveIntegerField(default=None, null=True, choices=[(0, 'Free'), (1, 'Premium'), (2, 'Premium with in-app payments'), (3, 'Free with in-app payments'), (4, "I'll use my own system for in-app payments")])),
                ('install_type', models.PositiveIntegerField(default=0, db_index=True, choices=[(0, 'User'), (1, 'Reviewer'), (2, 'Developer')])),
            ],
            options={
                'db_table': 'users_install',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Installs',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('value', models.FloatField(default=0.0)),
                ('region', models.PositiveIntegerField(default=0, db_index=True)),
            ],
            options={
                'db_table': 'addons_installs',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Preview',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('filetype', models.CharField(max_length=25)),
                ('thumbtype', models.CharField(max_length=25)),
                ('position', models.IntegerField(default=0)),
                ('sizes', django_extensions.db.fields.json.JSONField(max_length=25)),
            ],
            options={
                'ordering': ('position', 'created'),
                'db_table': 'previews',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RatingDescriptors',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('has_esrb_mild_blood', models.BooleanField(default=False, help_text='Mild Blood')),
                ('has_esrb_mild_cartoon_violence', models.BooleanField(default=False, help_text='Mild Cartoon Violence')),
                ('has_classind_sex', models.BooleanField(default=False, help_text='Sexo')),
                ('has_classind_nudity', models.BooleanField(default=False, help_text='Nudez')),
                ('has_pegi_shares_location', models.BooleanField(default=False, help_text='Location data sharing')),
                ('has_pegi_digital_purchases', models.BooleanField(default=False, help_text='In-app purchase option')),
                ('has_esrb_mild_sexual_content', models.BooleanField(default=False, help_text='Mild Sexual Content')),
                ('has_pegi_sex_content', models.BooleanField(default=False, help_text='Sex')),
                ('has_esrb_drug_tobacco_use', models.BooleanField(default=False, help_text='Use of Drug and Tobacco')),
                ('has_classind_drugs', models.BooleanField(default=False, help_text='Drogas')),
                ('has_esrb_alcohol_tobacco_use', models.BooleanField(default=False, help_text='Use of Alcohol and Tobacco')),
                ('has_generic_violence', models.BooleanField(default=False, help_text='Violence')),
                ('has_generic_drugs', models.BooleanField(default=False, help_text='Drugs')),
                ('has_pegi_violence', models.BooleanField(default=False, help_text='Violence')),
                ('has_esrb_intense_violence', models.BooleanField(default=False, help_text='Intense Violence')),
                ('has_esrb_mild_fantasy_violence', models.BooleanField(default=False, help_text='Mild Fantasy Violence')),
                ('has_pegi_shares_info', models.BooleanField(default=False, help_text='Personal data sharing')),
                ('has_classind_criminal_acts', models.BooleanField(default=False, help_text='Atos Crim\xednosos')),
                ('has_esrb_sex_violence', models.BooleanField(default=False, help_text='Sexual Violence')),
                ('has_usk_alcohol', models.BooleanField(default=False, help_text='Alkoholkonsum')),
                ('has_esrb_mature_humor', models.BooleanField(default=False, help_text='Mature Humor')),
                ('has_usk_discrimination', models.BooleanField(default=False, help_text='Diskriminierung')),
                ('has_usk_lang', models.BooleanField(default=False, help_text='Explizite Sprache')),
                ('has_usk_scary', models.BooleanField(default=False, help_text='\xc4ngstigende Inhalte')),
                ('has_esrb_lang', models.BooleanField(default=False, help_text='Language')),
                ('has_esrb_violence', models.BooleanField(default=False, help_text='Violence')),
                ('has_esrb_mild_violence', models.BooleanField(default=False, help_text='Mild Violence')),
                ('has_esrb_mild_suggestive_themes', models.BooleanField(default=False, help_text='Mild Suggestive Themes ')),
                ('has_esrb_lyrics', models.BooleanField(default=False, help_text='Lyrics')),
                ('has_usk_violence', models.BooleanField(default=False, help_text='Gewalt')),
                ('has_esrb_blood_gore', models.BooleanField(default=False, help_text='Blood and Gore')),
                ('has_esrb_suggestive', models.BooleanField(default=False, help_text='Suggestive Themes')),
                ('has_esrb_sex_themes', models.BooleanField(default=False, help_text='Sexual Themes')),
                ('has_usk_sex_content', models.BooleanField(default=False, help_text='Erotik/Sexuelle Inhalte')),
                ('has_pegi_drugs', models.BooleanField(default=False, help_text='Drugs')),
                ('has_esrb_crime_instruct', models.BooleanField(default=False, help_text='Criminal Instruction')),
                ('has_pegi_online', models.BooleanField(default=False, help_text='Online')),
                ('has_usk_explicit_violence', models.BooleanField(default=False, help_text='Explizite Gewalt')),
                ('has_esrb_tobacco_ref', models.BooleanField(default=False, help_text='Tobacco Reference')),
                ('has_esrb_mild_lang', models.BooleanField(default=False, help_text='Mild Language')),
                ('has_esrb_tobacco_use', models.BooleanField(default=False, help_text='Use of Tobacco')),
                ('has_classind_violence', models.BooleanField(default=False, help_text='Viol\xeancia')),
                ('has_esrb_mild_sexual_themes', models.BooleanField(default=False, help_text='Mild Sexual Themes ')),
                ('has_usk_some_swearing', models.BooleanField(default=False, help_text='Gelegentliches Fluchen')),
                ('has_usk_abstract_violence', models.BooleanField(default=False, help_text='Abstrakte Gewalt')),
                ('has_pegi_gambling', models.BooleanField(default=False, help_text='Gambling')),
                ('has_esrb_drug_tobacco_ref', models.BooleanField(default=False, help_text='Drug and Tobacco Reference')),
                ('has_esrb_alcohol_use', models.BooleanField(default=False, help_text='Use of Alcohol')),
                ('has_esrb_alcohol_tobacco_ref', models.BooleanField(default=False, help_text='Alcohol and Tobacco Reference')),
                ('has_esrb_crude_humor', models.BooleanField(default=False, help_text='Crude Humor')),
                ('has_usk_nudity', models.BooleanField(default=False, help_text='Nacktheit/Erotik')),
                ('has_generic_sex_content', models.BooleanField(default=False, help_text='Sex')),
                ('has_esrb_animated_blood', models.BooleanField(default=False, help_text='Animated Blood')),
                ('has_generic_gambling', models.BooleanField(default=False, help_text='Gambling')),
                ('has_generic_discrimination', models.BooleanField(default=False, help_text='Discrimination')),
                ('has_generic_scary', models.BooleanField(default=False, help_text='Fear')),
                ('has_esrb_mild_lyrics', models.BooleanField(default=False, help_text='Mild Lyrics')),
                ('has_usk_sex_violence', models.BooleanField(default=False, help_text='Sexuelle Gewalt')),
                ('has_esrb_drug_alcohol_use', models.BooleanField(default=False, help_text='Use of Drug and Alcohol')),
                ('has_usk_horror', models.BooleanField(default=False, help_text='Grusel/Horror')),
                ('has_esrb_alcohol_ref', models.BooleanField(default=False, help_text='Alcohol Reference')),
                ('has_classind_sex_explicit', models.BooleanField(default=False, help_text='Sexo Expl\xedcito')),
                ('has_esrb_violence_ref', models.BooleanField(default=False, help_text='Violent References')),
                ('has_pegi_discrimination', models.BooleanField(default=False, help_text='Discrimination')),
                ('has_usk_some_scares', models.BooleanField(default=False, help_text='Seltene Schreckmomente')),
                ('has_usk_sex_ref', models.BooleanField(default=False, help_text='Sexuelle Andeutungen')),
                ('has_usk_drugs', models.BooleanField(default=False, help_text='Drogen')),
                ('has_esrb_nudity', models.BooleanField(default=False, help_text='Nudity')),
                ('has_pegi_lang', models.BooleanField(default=False, help_text='Language')),
                ('has_esrb_fantasy_violence', models.BooleanField(default=False, help_text='Fantasy Violence')),
                ('has_esrb_drug_use', models.BooleanField(default=False, help_text='Use of Drugs')),
                ('has_esrb_cartoon_violence', models.BooleanField(default=False, help_text='Cartoon Violence')),
                ('has_esrb_real_gambling', models.BooleanField(default=False, help_text='Real Gambling')),
                ('has_classind_drugs_legal', models.BooleanField(default=False, help_text='Drogas L\xedcitas')),
                ('has_esrb_comic_mischief', models.BooleanField(default=False, help_text='Comic Mischief')),
                ('has_classind_lang', models.BooleanField(default=False, help_text='Linguagem Impr\xf3pria')),
                ('has_classind_violence_extreme', models.BooleanField(default=False, help_text='Viol\xeancia Extrema')),
                ('has_esrb_drug_alcohol_ref', models.BooleanField(default=False, help_text='Drug and Alcohol Reference')),
                ('has_esrb_drug_alcohol_tobacco_ref', models.BooleanField(default=False, help_text='Drug, Alcohol and Tobacco Reference')),
                ('has_usk_drug_use', models.BooleanField(default=False, help_text='Drogenkonsum')),
                ('has_esrb_partial_nudity', models.BooleanField(default=False, help_text='Partial Nudity')),
                ('has_classind_sex_content', models.BooleanField(default=False, help_text='Conte\xfado Sexual')),
                ('has_esrb_strong_lyrics', models.BooleanField(default=False, help_text='Strong Lyrics')),
                ('has_esrb_strong_lang', models.BooleanField(default=False, help_text='Strong Language')),
                ('has_pegi_users_interact', models.BooleanField(default=False, help_text='Social interaction functionality')),
                ('has_classind_drugs_illegal', models.BooleanField(default=False, help_text='Drogas Il\xedcitas')),
                ('has_esrb_drug_alcohol_tobacco_use', models.BooleanField(default=False, help_text='Use of Drug, Alcohol and Tobacco')),
                ('has_usk_sex_violence_ref', models.BooleanField(default=False, help_text='Andeutungen Sexueller Gewalt')),
                ('has_esrb_sex_content', models.BooleanField(default=False, help_text='Sexual Content')),
                ('has_esrb_sim_gambling', models.BooleanField(default=False, help_text='Simulated Gambling')),
                ('has_esrb_blood', models.BooleanField(default=False, help_text='Blood')),
                ('has_esrb_crime', models.BooleanField(default=False, help_text='Crime')),
                ('has_esrb_strong_sex_content', models.BooleanField(default=False, help_text='Strong Sexual Content')),
                ('has_generic_lang', models.BooleanField(default=False, help_text='Language')),
                ('has_pegi_horror', models.BooleanField(default=False, help_text='Horror')),
                ('has_pegi_scary', models.BooleanField(default=False, help_text='Fear')),
                ('has_esrb_hate_speech', models.BooleanField(default=False, help_text='Hate Speech')),
                ('has_esrb_scary', models.BooleanField(default=False, help_text='Scary Themes')),
                ('has_esrb_drug_ref', models.BooleanField(default=False, help_text='Drug Reference')),
                ('has_classind_shocking', models.BooleanField(default=False, help_text='Conte\xfado Impactante')),
                ('has_generic_online', models.BooleanField(default=False, help_text='Online')),
                ('has_usk_tobacco', models.BooleanField(default=False, help_text='Tabakkonsum')),
            ],
            options={
                'db_table': 'webapps_rating_descriptors',
            },
            bases=(models.Model, mkt.site.models.DynamicBoolFieldsMixin),
        ),
        migrations.CreateModel(
            name='RatingInteractives',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('has_digital_purchases', models.BooleanField(default=False, help_text=b'Digital Purchases')),
                ('has_shares_location', models.BooleanField(default=False, help_text=b'Shares Location')),
                ('has_users_interact', models.BooleanField(default=False, help_text=b'Users Interact')),
                ('has_shares_info', models.BooleanField(default=False, help_text=b'Shares Info')),
            ],
            options={
                'db_table': 'webapps_rating_interactives',
            },
            bases=(models.Model, mkt.site.models.DynamicBoolFieldsMixin),
        ),
        migrations.CreateModel(
            name='Trending',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('value', models.FloatField(default=0.0)),
                ('region', models.PositiveIntegerField(default=0, db_index=True)),
            ],
            options={
                'db_table': 'addons_trending',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Webapp',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('guid', models.CharField(max_length=255, unique=True, null=True)),
                ('app_slug', models.CharField(max_length=30, unique=True, null=True, blank=True)),
                ('default_locale', models.CharField(default=b'en-US', max_length=10, db_column=b'defaultlocale')),
                ('status', models.PositiveSmallIntegerField(default=0, db_index=True, choices=[(0, 'Incomplete'), (16, 'Unlisted'), (2, 'Pending approval'), (4, 'Published'), (5, 'Banned from Marketplace'), (11, 'Deleted'), (12, 'Rejected'), (13, 'Approved but private'), (15, 'Blocked')])),
                ('highest_status', models.PositiveSmallIntegerField(default=0, help_text=b'An upper limit for what an author can change.', db_column=b'higheststatus', choices=[(0, 'Incomplete'), (16, 'Unlisted'), (2, 'Pending approval'), (4, 'Published'), (5, 'Banned from Marketplace'), (11, 'Deleted'), (12, 'Rejected'), (13, 'Approved but private'), (15, 'Blocked')])),
                ('icon_type', models.CharField(max_length=25, db_column=b'icontype', blank=True)),
                ('icon_hash', models.CharField(max_length=8, null=True, blank=True)),
                ('average_rating', models.FloatField(default=0, db_column=b'averagerating')),
                ('bayesian_rating', models.FloatField(default=0, db_column=b'bayesianrating', db_index=True)),
                ('total_reviews', models.PositiveIntegerField(default=0, db_column=b'totalreviews')),
                ('last_updated', models.DateTimeField(help_text=b'Last time this add-on had a file/version update', null=True, db_index=True)),
                ('disabled_by_user', models.BooleanField(default=False, db_index=True, db_column=b'inactive')),
                ('promo_img_hash', models.CharField(max_length=8, null=True, blank=True)),
                ('public_stats', models.BooleanField(default=False, db_column=b'publicstats')),
                ('categories', django_extensions.db.fields.json.JSONField()),
                ('premium_type', models.PositiveSmallIntegerField(default=0, choices=[(0, 'Free'), (1, 'Premium'), (2, 'Premium with in-app payments'), (3, 'Free with in-app payments'), (4, "I'll use my own system for in-app payments")])),
                ('manifest_url', models.URLField(max_length=255, null=True, blank=True)),
                ('app_domain', models.CharField(db_index=True, max_length=255, null=True, blank=True)),
                ('publish_type', models.PositiveSmallIntegerField(default=0)),
                ('mozilla_contact', models.EmailField(max_length=75, blank=True)),
                ('vip_app', models.BooleanField(default=False)),
                ('priority_review', models.BooleanField(default=False)),
                ('is_packaged', models.BooleanField(default=False, db_index=True)),
                ('enable_new_regions', models.BooleanField(default=True, db_index=True)),
                ('iarc_purged', models.BooleanField(default=False)),
                ('solitude_public_id', models.CharField(max_length=255, null=True, blank=True)),
                ('is_offline', models.BooleanField(default=False)),
                ('_current_version', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, db_column=b'current_version', to='versions.Version', null=True)),
                ('_latest_version', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, db_column=b'latest_version', to='versions.Version', null=True)),
                ('authors', models.ManyToManyField(related_name='addons', through='webapps.AddonUser', to=settings.AUTH_USER_MODEL)),
                ('description', mkt.translations.fields.PurifiedField(related_name='Webapp_description_set+', null=True, on_delete=django.db.models.deletion.SET_NULL, db_column=b'description', to_field=b'id', blank=True, to=mkt.translations.models.PurifiedTranslation, short=False, require_locale=True, unique=True)),
                ('homepage', mkt.translations.fields.TranslatedField(related_name='Webapp_homepage_set+', null=True, on_delete=django.db.models.deletion.SET_NULL, db_column=b'homepage', to_field=b'id', blank=True, to=mkt.translations.models.Translation, short=True, require_locale=True, unique=True)),
                ('name', mkt.translations.fields.TranslatedField(related_name='Webapp_name_set+', null=True, on_delete=django.db.models.deletion.SET_NULL, db_column=b'name', default=None, to_field=b'id', to=mkt.translations.models.Translation, short=True, blank=True, require_locale=True, unique=True)),
                ('privacy_policy', mkt.translations.fields.PurifiedField(related_name='Webapp_privacy_policy_set+', null=True, on_delete=django.db.models.deletion.SET_NULL, db_column=b'privacypolicy', to_field=b'id', blank=True, to=mkt.translations.models.PurifiedTranslation, short=True, require_locale=True, unique=True)),
                ('support_email', mkt.translations.fields.TranslatedField(related_name='Webapp_support_email_set+', null=True, on_delete=django.db.models.deletion.SET_NULL, db_column=b'supportemail', to_field=b'id', blank=True, to=mkt.translations.models.Translation, short=True, require_locale=True, unique=True)),
                ('support_url', mkt.translations.fields.TranslatedField(related_name='Webapp_support_url_set+', null=True, on_delete=django.db.models.deletion.SET_NULL, db_column=b'supporturl', to_field=b'id', blank=True, to=mkt.translations.models.Translation, short=True, require_locale=True, unique=True)),
                ('tags', models.ManyToManyField(to='tags.Tag')),
            ],
            options={
                'db_table': 'addons',
            },
            bases=(mkt.webapps.models.UUIDModelMixin, mkt.site.models.OnChangeMixin, models.Model),
        ),
        migrations.AddField(
            model_name='trending',
            name='addon',
            field=models.ForeignKey(related_name='trending', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='trending',
            unique_together=set([('addon', 'region')]),
        ),
        migrations.AddField(
            model_name='ratinginteractives',
            name='addon',
            field=models.OneToOneField(related_name='rating_interactives', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ratingdescriptors',
            name='addon',
            field=models.OneToOneField(related_name='rating_descriptors', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='preview',
            name='addon',
            field=models.ForeignKey(related_name='previews', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='preview',
            name='caption',
            field=mkt.translations.fields.TranslatedField(related_name='Preview_caption_set+', null=True, on_delete=django.db.models.deletion.SET_NULL, db_column=b'caption', to_field=b'id', blank=True, to=mkt.translations.models.Translation, short=True, require_locale=True, unique=True),
            preserve_default=True,
        ),
        migrations.AlterIndexTogether(
            name='preview',
            index_together=set([('addon', 'position', 'created')]),
        ),
        migrations.AddField(
            model_name='installs',
            name='addon',
            field=models.ForeignKey(related_name='popularity', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='installs',
            unique_together=set([('addon', 'region')]),
        ),
        migrations.AddField(
            model_name='installed',
            name='addon',
            field=models.ForeignKey(related_name='installed', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='installed',
            name='user',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='installed',
            unique_together=set([('addon', 'user', 'install_type')]),
        ),
        migrations.AddField(
            model_name='iarcinfo',
            name='addon',
            field=models.OneToOneField(related_name='iarc_info', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='geodata',
            name='addon',
            field=models.OneToOneField(related_name='_geodata', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='geodata',
            name='banner_message',
            field=mkt.translations.fields.PurifiedField(related_name='Geodata_banner_message_set+', null=True, on_delete=django.db.models.deletion.SET_NULL, db_column=b'banner_message', to_field=b'id', blank=True, to=mkt.translations.models.PurifiedTranslation, short=True, require_locale=True, unique=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='contentrating',
            name='addon',
            field=models.ForeignKey(related_name='content_ratings', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='contentrating',
            unique_together=set([('addon', 'ratings_body')]),
        ),
        migrations.AddField(
            model_name='addonuser',
            name='addon',
            field=models.ForeignKey(to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='addonuser',
            name='user',
            field=mkt.users.models.UserForeignKey(to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='addonuser',
            unique_together=set([('addon', 'user')]),
        ),
        migrations.AlterIndexTogether(
            name='addonuser',
            index_together=set([('addon', 'user', 'listed'), ('addon', 'listed')]),
        ),
        migrations.AddField(
            model_name='addonupsell',
            name='free',
            field=models.ForeignKey(related_name='_upsell_from', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='addonupsell',
            name='premium',
            field=models.ForeignKey(related_name='_upsell_to', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='addonupsell',
            unique_together=set([('free', 'premium')]),
        ),
        migrations.AddField(
            model_name='addonexcludedregion',
            name='addon',
            field=models.ForeignKey(related_name='addonexcludedregion', to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='addonexcludedregion',
            unique_together=set([('addon', 'region')]),
        ),
        migrations.AddField(
            model_name='addondevicetype',
            name='addon',
            field=models.ForeignKey(to='webapps.Webapp'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='addondevicetype',
            unique_together=set([('addon', 'device_type')]),
        ),
    ]
